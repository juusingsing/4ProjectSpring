<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="back.mapper.user.UserMapper"> <!-- 매퍼의 네임스페이스 설정 -->

	 <select id="getUserList" parameterType="back.model.user.User" resultType="back.model.user.User">
             SELECT *
             FROM (
	             SELECT
	                ROWNUM AS RN,
	                B.USERS_ID,
	                B.USERS_FILE_ID,
	            	B.USERS_NAME,
	            	B.USERS_PASSWORD,
	            	B.USERS_EMAIL,
			        B.CREATE_ID,
			        B.UPDATE_ID,
			        B.CREATE_DT,
			        B.UPDATE_DT,
			        B.DEL_YN
	            FROM (
		            SELECT
		            	A.USERS_ID,
		            	A.USERS_FILE_ID,
		            	A.USERS_NAME,
		            	A.USERS_PASSWORD,
		            	A.USERS_EMAIL,
				        A.CREATE_ID,
				        A.UPDATE_ID,
				        TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT,
				        TO_CHAR(A.UPDATE_DT, 'YYYY-MM-DD') AS UPDATE_DT,
				        A.DEL_YN 
				    FROM USERS A
				    <where>
					   <if test="searchText != null and searchText != ''">
		            	AND (
		            	   A.USERS_NAME LIKE '%'||#{searchText}||'%'
		            	)
		        	   </if>
		        	   <if test="startDate != null and startDate != ''">
				           <![CDATA[ AND A.CREATE_DT >= TO_DATE(#{startDate} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') ]]>
				        </if>
				        <if test="endDate != null and endDate != ''">
				           <![CDATA[ AND A.CREATE_DT <= TO_DATE(#{endDate} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS') ]]>
				        </if>
			        </where>
			        ORDER BY ${sortField} ${sortOrder}
			    ) B
		   	) C
		    WHERE C.RN BETWEEN #{startRow} AND #{endRow}
		    
    </select>
    
    <select id="getTotalUserCount" parameterType="back.model.user.User" resultType="int">
        SELECT COUNT(B.USERS_ID) 
          FROM (
	            SELECT
	                A.USERS_ID,
	            	A.USERS_FILE_ID,
	            	A.USERS_NAME,
	            	A.USERS_PASSWORD,
	            	A.USERS_EMAIL,
			        A.CREATE_ID,
			        A.UPDATE_ID,
			        TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD') AS CREATE_DT,
			        TO_CHAR(A.UPDATE_DT, 'YYYY-MM-DD') AS UPDATE_DT,
			        A.DEL_YN
			    FROM USERS A
			    <where>
				   <if test="searchText != null and searchText != ''">
	            	AND (
	            	   A.USERS_NAME LIKE '%'||#{searchText}||'%'
	            	)
	        	   </if>
	        	   <if test="startDate != null and startDate != ''">
			           <![CDATA[ AND A.CREATE_DT >= TO_DATE(#{startDate} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') ]]>
			        </if>
			        <if test="endDate != null and endDate != ''">
			           <![CDATA[ AND A.CREATE_DT <= TO_DATE(#{endDate} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS') ]]>
			        </if>
		        </where>
		    ) B
    </select>
    


    <!-- 사용자 ID로 사용자 정보 조회 -->
    <select id="getUserById" parameterType="string" resultType="back.model.user.User">
        SELECT 
            USERS_ID, 
            USERS_FILE_ID,
            USERS_NAME, 
            USERS_PASSWORD, 
            USERS_EMAIL, 
            CREATE_DT,
            CREATE_ID,
            UPDATE_ID, 
            UPDATE_DT
        FROM 
            USERS
        WHERE 
            USERS_ID = #{usersId} <!-- SQL 매개변수 바인딩 -->
    </select>

    <!-- 사용자 생성 -->
    <insert id="registerUser" parameterType="back.model.user.User">
        INSERT INTO USERS 
        	( USERS_ID, 
        	  USERS_NAME, 
        	  USERS_PASSWORD, 
        	  USERS_EMAIL, 
        	  CREATE_ID)
        VALUES (#{usersId}, #{usersName}, #{usersPassword}, #{usersEmail}, #{createId})
    </insert>

    <!-- 사용자 업데이트 -->
    <update id="updateUser" parameterType="back.model.user.User">
	    UPDATE USERS
	    SET 
	        USERS_NAME = #{usersName},
	        USERS_EMAIL = #{email},
	        UPDATE_ID = #{userId},
	        UPDATE_DT = SYSDATE
	        <if test="password != null and password != ''">
	        	,USERS_PASSWORD = #{usersPassword}  <!-- password 가 null이 아니거나 공백이 아니면 재설정-->
	        </if>
	    WHERE USERS_ID = #{usersId}
	</update>

    <!-- 사용자 삭제 
    <delete id="deleteUser" parameterType="string">
        DELETE FROM USERS
        WHERE USER_ID = #{userId}
    </delete>
    -->
    
    <!-- 사용자 삭제 (논리 삭제) -->
    <update id="deleteUser" parameterType="back.model.user.User">
        UPDATE USERS 
        SET DEL_YN = 'Y',  <!-- 삭제된 사용자 표시 -->
            UPDATE_ID = #{updateId},  <!-- 삭제를 수행한 관리자 ID -->
            UPDATE_DT = SYSDATE  <!-- 삭제 시간 기록 -->
        WHERE USERS_ID = #{usersId}
    </update>

    <!-- 모든 사용자 조회 (선택 사항) -->
    <select id="getAllUsers" resultType="back.model.user.User">
        SELECT 
            USERS_ID, 
            USERS_NAME, 
            USERS_EMAIL, 
            CREATE_DT, 
            UPDATE_DT
        FROM 
            USERS
    </select>
    
    <update id="userM" parameterType="back.model.user.User">
    	UPDATE USERS 
        SET DEL_YN = #{delYn},  <!-- 삭제된 사용자 표시 -->
            UPDATE_ID = #{updateId},  <!-- 삭제를 수행한 관리자 ID -->
            UPDATE_DT = SYSDATE  <!-- 삭제 시간 기록 -->
        WHERE USERS_ID = #{usersId}
    
    </update>
    
    <select id="usersIdCheck" resultType="int" parameterType="back.model.user.User">
	    SELECT COUNT(*) FROM USERS WHERE USERS_ID = #{usersId}
	</select>

</mapper>
